//============================================================================
// Name        : KMP.cpp
// Author      : koong
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;

#define MAX_LEN 10000
class KMP{
	KMP();
	~KMP();
public:
	int fail[MAX_LEN];
	void GetFail(char* p);
	void Compare(char* s, char* p);
	int StringMatch(char* s, char* p);
	int size_of(char* s);
};

KMP::KMP()
{
	for(int i=0 ; i<MAX_LEN ; i++)
		fail[i] = 0;
}

KMP::~KMP()
{
}

int KMP::size_of(char* s)
{
	int i = 0;
	while(1){
		if(s[i] == '\0'){
			return i;
		}
		i++;
	}
	return -1;
}

void KMP::GetFail(char* p)
{
	int i=-1,j=0;
	fail[0] = -1;
	while(j<size_of(p)){
		if(i==-1 || (i>=0 && p[i] == p[j])){
			i++;
			j++;
			fail[j] = i;
		}
		else i = p[i];
	}

}

void KMP::Compare(char* s, char* p)
{
    int n = size_of(s);
    int m = size_of(p);
    GetFail(p);

    int i = 0, j = 0;
    while(i < n) {
        if(j == -1 || (j >= 0 && s[i] == p[j])) i++, j++;
        else if(s[i] != fail[j]) j = fail[j];
        if(j == m) {
            cout << "The matching " << i-m+1 << endl;
            j = fail[j];
        }
    }
}

int KMP::StringMatch(char* s, char* p)
{
	Compare(s, p);

	return 0;
}

int main() {
	cout << "Search matching string" << endl; // prints Sorting Algorithm
	char S[100] = "banana";
	char P[100] = "anan";

	KMP kmp;
	kmp.StringMatch(S, P);
	return 0;
}
